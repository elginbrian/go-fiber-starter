basePath: /api/v1/
definitions:
  request.ChangePasswordRequest:
    properties:
      new_password:
        example: NewP@ssw0rd123
        minLength: 6
        type: string
      old_password:
        example: OldP@ssw0rd
        minLength: 6
        type: string
    required:
    - new_password
    - old_password
    type: object
  request.CreateCommentRequest:
    properties:
      content:
        example: This is a great post!
        type: string
    required:
    - content
    type: object
  request.RefreshTokenRequest:
    properties:
      refresh_token:
        example: your_refresh_token_here
        type: string
    required:
    - refresh_token
    type: object
  request.UpdatePostRequest:
    properties:
      caption:
        example: Had an amazing trip to the mountains!
        minLength: 1
        type: string
    required:
    - caption
    type: object
  request.UserLoginRequest:
    properties:
      email:
        example: john.doe@example.com
        type: string
      password:
        example: P@ssw0rd123
        type: string
    required:
    - email
    - password
    type: object
  request.UserRegistrationRequest:
    properties:
      email:
        example: john.doe@example.com
        type: string
      password:
        example: P@ssw0rd123
        minLength: 6
        type: string
      username:
        example: john_doe
        type: string
    required:
    - email
    - password
    - username
    type: object
  response.ChangePasswordData:
    properties:
      message:
        example: Password changed successfully
        type: string
    type: object
  response.Comment:
    properties:
      content:
        example: This is a comment!
        type: string
      created_at:
        example: "2025-01-31T12:00:00Z"
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      post_id:
        example: c6f7c988-233f-4f3c-a74d-17f72e4a1b56
        type: string
      updated_at:
        example: "2025-01-31T12:30:00Z"
        type: string
      user_id:
        example: b3d1a42b-6871-4a47-bec3-6df0980a9c75
        type: string
    type: object
  response.CreateCommentResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/response.Comment'
      status:
        example: success
        type: string
    type: object
  response.CreatePostResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/response.Post'
      status:
        example: success
        type: string
    type: object
  response.DeleteCommentResponse:
    properties:
      code:
        type: integer
      message:
        example: Comment deleted successfully
        type: string
      status:
        example: success
        type: string
    type: object
  response.DeletePostData:
    properties:
      message:
        example: Post deleted successfully
        type: string
    type: object
  response.DeletePostResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/response.DeletePostData'
      status:
        example: success
        type: string
    type: object
  response.ErrorResponse:
    properties:
      code:
        type: integer
      message:
        type: string
      status:
        type: string
    type: object
  response.GetAllLikesResponse:
    properties:
      code:
        type: integer
      data:
        items:
          $ref: '#/definitions/response.Like'
        type: array
      status:
        example: success
        type: string
    type: object
  response.GetAllPostsResponse:
    properties:
      code:
        type: integer
      data:
        items:
          $ref: '#/definitions/response.Post'
        type: array
      status:
        example: success
        type: string
    type: object
  response.GetAllUsersResponse:
    properties:
      code:
        type: integer
      data:
        items:
          $ref: '#/definitions/response.User'
        type: array
      status:
        example: success
        type: string
    type: object
  response.GetCommentsResponse:
    properties:
      code:
        type: integer
      data:
        items:
          $ref: '#/definitions/response.Comment'
        type: array
      status:
        example: success
        type: string
    type: object
  response.GetCurrentUserResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/response.User'
      status:
        example: success
        type: string
    type: object
  response.GetPostByIDResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/response.Post'
      status:
        example: success
        type: string
    type: object
  response.GetUserByIDResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/response.User'
      status:
        example: success
        type: string
    type: object
  response.Like:
    properties:
      created_at:
        example: "2025-01-31T12:00:00Z"
        type: string
      id:
        example: a1f5e4b3-8d2a-4c39-91a2-47b36295d8a3
        type: string
      post_id:
        example: c6f7c988-233f-4f3c-a74d-17f72e4a1b56
        type: string
      user_id:
        example: b3d1a42b-6871-4a47-bec3-6df0980a9c75
        type: string
    type: object
  response.LikeResponse:
    properties:
      code:
        type: integer
      message:
        example: Like added successfully
        type: string
      status:
        example: success
        type: string
    type: object
  response.LoginData:
    properties:
      access_token:
        example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  response.LoginResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/response.LoginData'
      status:
        example: success
        type: string
    type: object
  response.Post:
    properties:
      caption:
        example: Had an amazing day at the beach!
        type: string
      created_at:
        example: "2025-01-31T12:00:00Z"
        type: string
      id:
        example: f9d6b52a-76a1-4b2b-9229-4c8db23a5ef2
        type: string
      image_url:
        example: https://example.com/images/beach.jpg
        type: string
      updated_at:
        example: "2025-01-31T12:30:00Z"
        type: string
      user_id:
        example: 2e0850c7-d213-4a91-9b78-bb86e3a6f0d3
        type: string
    type: object
  response.RefreshTokenData:
    properties:
      access_token:
        example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  response.RefreshTokenResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/response.RefreshTokenData'
      status:
        example: success
        type: string
    type: object
  response.RegisterData:
    properties:
      message:
        example: User registered successfully
        type: string
    type: object
  response.RegisterResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/response.RegisterData'
      status:
        example: success
        type: string
    type: object
  response.SearchPostsResponse:
    properties:
      code:
        type: integer
      data:
        items:
          $ref: '#/definitions/response.Post'
        type: array
      status:
        example: success
        type: string
    type: object
  response.SearchUsersResponse:
    properties:
      code:
        type: integer
      data:
        items:
          $ref: '#/definitions/response.User'
        type: array
      status:
        example: success
        type: string
    type: object
  response.UpdatePostResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/response.Post'
      status:
        example: success
        type: string
    type: object
  response.UpdateUserResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/response.User'
      status:
        example: success
        type: string
    type: object
  response.User:
    properties:
      bio:
        example: Hi there!
        type: string
      created_at:
        example: "2025-01-31T12:00:00Z"
        type: string
      email:
        example: john.doe@example.com
        type: string
      id:
        example: 3d5a8b92-f1c5-4dbe-a2a7-1d9a8c743e9b
        type: string
      image_url:
        example: https://example.com/profile.jpg
        type: string
      updated_at:
        example: "2025-01-31T12:30:00Z"
        type: string
      username:
        example: john_doe
        type: string
    type: object
host: localhost:8084
info:
  contact: {}
  description: This is a RESTful API for a simple social media application. It allows
    users to manage their posts, including creating, updating, and deleting posts,
    and provides authentication using JWT. The API is built using the Fiber framework
    and interacts with a PostgreSQL database.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: FIBER STARTER API
  version: "1.0"
paths:
  /auth/change-password:
    patch:
      consumes:
      - application/json
      description: Update your password securely.
      parameters:
      - description: Change Password Request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            $ref: '#/definitions/response.ChangePasswordData'
        "400":
          description: Validation error or invalid request format
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Change your password
      tags:
      - auth
  /auth/current-user:
    get:
      consumes:
      - application/json
      description: Retrieve logged-in user's details using an access token.
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            $ref: '#/definitions/response.GetCurrentUserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get current user info
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and receive access and refresh tokens.
      parameters:
      - description: User login details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful login response
          schema:
            $ref: '#/definitions/response.LoginResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Log in a user
      tags:
      - auth
  /auth/refresh-token:
    post:
      consumes:
      - application/json
      description: Obtain a new access token using a valid refresh token.
      parameters:
      - description: Refresh token request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: New access token
          schema:
            $ref: '#/definitions/response.RefreshTokenResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Refresh access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new account by providing a username, email, and password.
      parameters:
      - description: User registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.UserRegistrationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successful registration response
          schema:
            $ref: '#/definitions/response.RegisterResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /comments/{id}:
    delete:
      description: Delete a comment by its ID. Only the comment creator can delete
        it. Requires authentication.
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: Successful deletion response
          schema:
            $ref: '#/definitions/response.DeleteCommentResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a comment
      tags:
      - comments
  /posts:
    get:
      description: Get a list of all posts, along with details like the user who created
        them, the caption, image URL, and timestamps.
      produces:
      - application/json
      responses:
        "200":
          description: Successful fetch posts response
          schema:
            $ref: '#/definitions/response.GetAllPostsResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get all posts
      tags:
      - posts
    post:
      consumes:
      - multipart/form-data
      description: Create a new post with a caption. Optionally, you can upload an
        image. If an image is uploaded, its URL will be returned in the response.
        Requires JWT authentication.
      parameters:
      - description: Post caption
        in: formData
        name: caption
        required: true
        type: string
      - description: Post image (optional)
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Successful image upload response
          schema:
            $ref: '#/definitions/response.CreatePostResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new post
      tags:
      - posts
  /posts/{id}:
    delete:
      description: Delete a post by its ID. Only the post creator is allowed to delete
        it. Requires JWT authentication.
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: Successful delete post response
          schema:
            $ref: '#/definitions/response.DeletePostResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a post
      tags:
      - posts
    get:
      description: Get a post by its unique ID, including the caption, image URL,
        and timestamps.
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful fetch post response
          schema:
            $ref: '#/definitions/response.GetPostByIDResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get a post by ID
      tags:
      - posts
    patch:
      consumes:
      - application/json
      description: Update only the caption of an existing post. Only the post creator
        is allowed to make this change. Requires JWT authentication.
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      - description: Request body with updated caption
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.UpdatePostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successful update response
          schema:
            $ref: '#/definitions/response.UpdatePostResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an existing post's caption
      tags:
      - posts
  /posts/{post_id}/comments:
    get:
      description: Retrieve all comments related to a specific post.
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of comments
          schema:
            items:
              $ref: '#/definitions/response.GetCommentsResponse'
            type: array
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get comments for a post
      tags:
      - comments
    post:
      consumes:
      - application/json
      description: Create a comment for a post. Requires authentication.
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: string
      - description: Comment request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.CreateCommentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created comment response
          schema:
            $ref: '#/definitions/response.CreateCommentResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new comment
      tags:
      - comments
  /posts/{post_id}/like:
    post:
      description: Allows a user to like a post. Requires JWT authentication.
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: string
      responses:
        "200":
          description: Successfully liked post
          schema:
            $ref: '#/definitions/response.LikeResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Like a post
      tags:
      - likes
  /posts/{post_id}/likes:
    get:
      description: Fetch all users who liked a specific post
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of users who liked the post
          schema:
            items:
              $ref: '#/definitions/response.GetAllLikesResponse'
            type: array
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get all likes for a post
      tags:
      - likes
  /posts/{post_id}/unlike:
    post:
      description: Allows a user to remove their like from a post. Requires JWT authentication.
      parameters:
      - description: Post ID
        in: path
        name: post_id
        required: true
        type: string
      responses:
        "200":
          description: Successfully unliked post
          schema:
            $ref: '#/definitions/response.LikeResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Unlike a post
      tags:
      - likes
  /posts/user/{user_id}:
    get:
      description: Get all posts made by a specific user, including the caption, image
        URL, and timestamps.
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful fetch posts by user response
          schema:
            $ref: '#/definitions/response.GetAllPostsResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get all posts by a specific user
      tags:
      - posts
  /search/posts:
    get:
      description: Search for posts that match a given query, such as a keyword in
        the caption or content.
      parameters:
      - description: Search query
        in: query
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful search response
          schema:
            items:
              $ref: '#/definitions/response.SearchPostsResponse'
            type: array
        "400":
          description: Invalid query parameter
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Search posts
      tags:
      - search
  /search/users:
    get:
      description: Search for users by their name or email.
      parameters:
      - description: Search query
        in: query
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful search response
          schema:
            items:
              $ref: '#/definitions/response.SearchUsersResponse'
            type: array
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Search users
      tags:
      - search
  /users:
    get:
      description: Retrieve a list of all users from the database.
      produces:
      - application/json
      responses:
        "200":
          description: Successful fetch users response
          schema:
            $ref: '#/definitions/response.GetAllUsersResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get all users
      tags:
      - users
    patch:
      consumes:
      - multipart/form-data
      description: Update the bio, image_url, and/or username of the authenticated
        user. All fields are optional. If a field is not provided, the existing value
        will be retained.
      parameters:
      - description: Updated username (optional)
        in: formData
        name: username
        type: string
      - description: Updated bio (optional)
        in: formData
        name: bio
        type: string
      - description: Updated image (optional)
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Successful update user response
          schema:
            $ref: '#/definitions/response.UpdateUserResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized or invalid token
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user information
      tags:
      - users
  /users/{id}:
    get:
      description: Retrieve the details of a specific user by their ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful fetch user by ID response
          schema:
            $ref: '#/definitions/response.GetUserByIDResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get user details by ID
      tags:
      - users
  /users/{user_id}/likes:
    get:
      description: Fetch all posts liked by a specific user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of posts liked by the user
          schema:
            items:
              $ref: '#/definitions/response.GetAllLikesResponse'
            type: array
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Get all likes by a user
      tags:
      - likes
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
