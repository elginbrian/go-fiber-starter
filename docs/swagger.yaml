basePath: /api
definitions:
  domain.Post:
    properties:
      caption:
        type: string
      created_at:
        type: string
      id:
        type: integer
      image_url:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  domain.User:
    properties:
      created:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      updated:
        type: string
    type: object
  handler.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  handler.PostResponse:
    properties:
      content:
        type: string
      id:
        type: integer
      title:
        type: string
    type: object
  handler.UserLoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  handler.UserLoginResponse:
    properties:
      token:
        type: string
    type: object
  handler.UserRegistrationRequest:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  handler.UserRegistrationResponse:
    properties:
      message:
        type: string
    type: object
  handler.UserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
host: localhost:8084
info:
  contact:
    email: support@example.com
    name: API Support
    url: https://www.example.com/support
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://example.com/terms
  title: Fiber API
  version: "1.0"
paths:
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Logs in a user by verifying email and password, and returns a JWT
        token
      parameters:
      - description: User Login Details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.UserLoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Logs in a user
      tags:
      - auth
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: Registers a new user with a username, email, and password
      parameters:
      - description: User Registration Details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.UserRegistrationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.UserRegistrationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Registers a new user
      tags:
      - auth
  /api/posts:
    get:
      description: Retrieves all posts from the database
      produces:
      - application/json
      responses:
        "200":
          description: List of posts
          schema:
            items:
              $ref: '#/definitions/handler.PostResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get all posts
      tags:
      - posts
    post:
      consumes:
      - application/json
      description: Creates a new post in the database
      parameters:
      - description: Post details
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/domain.Post'
      produces:
      - application/json
      responses:
        "201":
          description: Created post details
          schema:
            $ref: '#/definitions/handler.PostResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Create a new post
      tags:
      - posts
  /api/posts/{id}:
    delete:
      description: Deletes a post from the database by its ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No content
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Delete a post by ID
      tags:
      - posts
    get:
      description: Retrieves a post from the database by its ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Post details
          schema:
            $ref: '#/definitions/handler.PostResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get a post by ID
      tags:
      - posts
    put:
      consumes:
      - application/json
      description: Updates a post's details in the database by its ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated post details
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/domain.Post'
      produces:
      - application/json
      responses:
        "200":
          description: Updated post details
          schema:
            $ref: '#/definitions/handler.PostResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Update an existing post
      tags:
      - posts
  /api/users:
    get:
      description: Retrieves all users from the database
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/handler.UserResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Creates a new user in the database
      parameters:
      - description: User details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created user details
          schema:
            $ref: '#/definitions/handler.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Create a new user
      tags:
      - users
  /api/users/{id}:
    delete:
      description: Deletes a user from the database by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No content
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Delete a user by ID
      tags:
      - users
    get:
      description: Retrieves a user from the database by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            $ref: '#/definitions/handler.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Updates a user's details in the database by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated user details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      produces:
      - application/json
      responses:
        "200":
          description: Updated user details
          schema:
            $ref: '#/definitions/handler.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: Update an existing user
      tags:
      - users
swagger: "2.0"
