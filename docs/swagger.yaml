basePath: /
definitions:
  domain.Post:
    properties:
      caption:
        type: string
      created_at:
        type: string
      id:
        type: integer
      image_url:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  domain.User:
    properties:
      created:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      updated:
        type: string
    type: object
  domain.UserLoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  domain.UserRegistrationRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  response.CreatePostResponse:
    properties:
      data:
        $ref: '#/definitions/response.Post'
      status:
        type: string
    type: object
  response.GetAllPostsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/response.Post'
        type: array
      status:
        type: string
    type: object
  response.GetPostByIDResponse:
    properties:
      data:
        $ref: '#/definitions/response.Post'
      status:
        type: string
    type: object
  response.LoginData:
    properties:
      token:
        type: string
    type: object
  response.LoginResponse:
    properties:
      data:
        $ref: '#/definitions/response.LoginData'
      status:
        type: string
    type: object
  response.Post:
    properties:
      caption:
        type: string
      created_at:
        type: string
      id:
        type: integer
      image_url:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  response.RegisterData:
    properties:
      message:
        type: string
    type: object
  response.RegisterResponse:
    properties:
      data:
        $ref: '#/definitions/response.RegisterData'
      status:
        type: string
    type: object
host: 178.128.61.145:8084
info:
  contact:
    email: elginbrian49@student.ub.ac.id
    name: Elgin Brian Wahyu Bramadhika
    url: https://wa.me/6285749806571
  description: This is a RESTful API for a simple social media application. It allows
    users to manage their posts, including creating, updating, and deleting posts,
    and provides authentication using JWT. The API is built using the Fiber framework
    and interacts with a PostgreSQL database.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Fiber Starter API
  version: "1.0"
paths:
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: This endpoint allows a user to log in by providing their email
        and password. Upon successful login, a JWT token is generated and returned,
        which can be used for authenticated requests.
      parameters:
      - description: User login details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/domain.UserLoginRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successful registration response
          schema:
            $ref: '#/definitions/response.LoginResponse'
      summary: Logs in an existing user
      tags:
      - auth
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: This endpoint allows users to create a new account by providing
        a username, email, and password. The registration data is validated, and upon
        successful registration, a success message is returned.
      parameters:
      - description: User registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/domain.UserRegistrationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successful registration response
          schema:
            $ref: '#/definitions/response.RegisterResponse'
      summary: Registers a new user
      tags:
      - auth
  /api/posts:
    get:
      description: Retrieves all posts, including the user who created them, the caption,
        image URL, and timestamps.
      produces:
      - application/json
      responses:
        "200":
          description: Successful fetch posts response
          schema:
            $ref: '#/definitions/response.GetAllPostsResponse'
      summary: Get all posts
      tags:
      - posts
    post:
      consumes:
      - multipart/form-data
      description: Creates a new post with an optional image. The caption is required.
        If an image is provided, it will be uploaded to the server, and the URL will
        be returned in the response.
      parameters:
      - description: Post caption
        in: formData
        name: caption
        required: true
        type: string
      - description: Post image (optional)
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Successful image upload response
          schema:
            $ref: '#/definitions/response.CreatePostResponse'
      security:
      - BearerAuth: []
      summary: Create a new post
      tags:
      - posts
  /api/posts/{id}:
    delete:
      description: Deletes a post by its ID. Only the creator of the post is authorized
        to delete it.
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      responses: {}
      security:
      - BearerAuth: []
      summary: Delete a post
      tags:
      - posts
    get:
      description: Retrieves a specific post by its ID, including its caption, image
        URL, and timestamps.
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successful fetch post response
          schema:
            $ref: '#/definitions/response.GetPostByIDResponse'
      summary: Get a post by ID
      tags:
      - posts
    put:
      consumes:
      - application/json
      description: Updates the details of a post (caption and/or image). Only the
        creator of the post is allowed to update it.
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated post details
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/domain.Post'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Update an existing post
      tags:
      - posts
  /api/users:
    get:
      description: Fetches all user records from the database and returns them with
        timestamps for creation and update.
      produces:
      - application/json
      responses:
        "200":
          description: 'Successful fetch users response" example({"status": "success",
            "data": [{"id": 1, "username": "John Doe", "email": "john.doe@example.com",
            "created_at": "2025-01-17T06:44:04.376387Z", "updated_at": "2025-01-17T06:44:04.376387Z"},
            {"id": 2, "username": "Jane Smith", "email": "jane.smith@example.com",
            "created_at": "2025-01-17T06:44:04.376387Z", "updated_at": "2025-01-17T06:44:04.376387Z"}]})'
          schema:
            additionalProperties: true
            type: object
      summary: Retrieve a list of all users
      tags:
      - users
  /api/users/{id}:
    delete:
      description: Accepts the user ID as a path parameter and deletes the user record
        from the database. Returns a success message upon deletion.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses: {}
      security:
      - BearerAuth: []
      summary: Delete a user record by ID
      tags:
      - users
    get:
      description: Fetches a specific user record from the database by the provided
        ID and returns the user's details, including timestamps.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      summary: Retrieve user details by user ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Accepts the user ID as a path parameter, along with updated user
        data in the request body, and updates the user record in the database. Returns
        the updated user's details with timestamps.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated user details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Update an existing user's details
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
